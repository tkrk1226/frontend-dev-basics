/*
구문(statement)
1. 자바 실행 단위

2. 구문의 구성 요소 
    - 값, 연산자 : 표현식
    - 주석 : 구문을 구성해도 실행되지 않는다.
    - 예약어들 : if, const, for, ...

3. 구문의 예
    - 주석 구문
    - if(1-1 == 0) {}
    - if ~ else
    - switch 
    - for, while, do ~ while, for ~ in

4. 공백 : token 분리  
    - 처음에 숫자가오면 Literal 처리가 되기 때문에 맨 처음 변수명에 숫자를 쓰지 못하게 한다.
    - ' '를 만나서 '10101010'과 'd'라는 token을 얻게 된다. 
    - 공백은 아무리 많아도 하나로 줄임...
    ex) 
        10101010 d;

5. 세미콜론 :
    - 원칙적으로 구문을 분리하는 역할을 한다.
    - 표현식을 표현식구문으로 만들어서 표현식을 실핼하게 한다.
    ex) 
        i = 10
        var s = "hello wolrd"

6. 개행
    - 역할 1 : ;를 대체한다.
    - 역할 2 : token을 분리하는 역할을 한다.
    - 역할 1, 2가 어느 것을 기준으로 결정되는가? : JavaScipt Engine의 Parser가 에러없는 실행을 우선 원칙으로 1,2를 판단해 수행한다.

*/

i = 10;
// 문자열 뒤에 세미콜론으로 나누어 주지않고 함수가 더 나옴...
// 구문을 분리해야한다.
// var s = "hello wolrd" console.log(s)

// i = 10 -> 표현식
// i = 10; -> 표현식구문

i = 10; j = 10; i;

// 개행의 역할
// 문자형 리터럴 뒤에 함수가 바로 오면 안된다 여기서는 ';'로 쓰인다.
// 예 1)
var s = "hello World"
console.log(s)

// 예 2)
a
=
2
+
2; // 여기서 ; 가 실행된다.

console.log(a);

o = {

};